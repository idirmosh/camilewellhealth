{"version":3,"file":"index.ie11.production.min.js","sources":["../src/utils/isHTMLElement.ts","../src/constants.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isArray.ts","../src/utils/isObject.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/transformToNestObject.ts","../src/utils/isUndefined.ts","../src/utils/unique.ts","../src/utils/get.ts","../src/logic/removeAllEventListeners.ts","../src/logic/getRadioValue.ts","../src/utils/isRadioInput.ts","../src/utils/isFileInput.ts","../src/utils/isCheckBoxInput.ts","../src/utils/isMultipleSelect.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/utils/isDetached.ts","../src/utils/isEmptyObject.ts","../src/utils/unset.ts","../src/logic/findRemovedFieldAndRemoveListener.ts","../src/utils/isString.ts","../src/logic/getFieldsValues.ts","../src/utils/deepMerge.ts","../src/utils/isSameError.ts","../src/utils/isRegex.ts","../src/logic/getValueAndMessage.ts","../src/utils/isFunction.ts","../src/utils/isBoolean.ts","../src/utils/isMessage.ts","../src/logic/getValidateError.ts","../src/logic/appendErrors.ts","../src/logic/validateField.ts","../src/utils/isPrimitive.ts","../src/utils/getPath.ts","../src/logic/assignWatchFields.ts","../src/logic/skipValidation.ts","../src/logic/getFieldArrayParentName.ts","../src/logic/getIsFieldsDifferent.ts","../src/logic/isNameInFieldArray.ts","../src/utils/validationModeChecker.ts","../src/utils/isRadioOrCheckbox.ts","../src/useForm.ts","../src/useFormContext.tsx","../src/logic/generateId.ts","../src/utils/remove.ts","../src/utils/move.ts","../src/utils/swap.ts","../src/utils/prepend.ts","../src/utils/insert.ts","../src/utils/fillEmptyArray.ts","../src/utils/filterBooleanArray.ts","../src/useFieldArray.ts","../src/controller.tsx","../src/logic/getInputValue.ts","../src/logic/shouldRenderBasedOnError.ts","../src/utils/onDomRemove.ts","../src/logic/attachEventListeners.ts","../src/utils/isSelectInput.ts","../src/logic/focusOnErrorField.ts","../src/useWatch.ts"],"sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types/form';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default (value: unknown): value is null | undefined => value == null;\n","export default <T>(value: unknown): value is T[] => Array.isArray(value);\n","import isNullOrUndefined from './isNullOrUndefined';\nimport isArray from './isArray';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n","import isArray from './isArray';\n\nexport default (value: [] | string) =>\n  !isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (input: string): (string | number)[] => {\n  const result: (string | number)[] = [];\n\n  input.replace(\n    /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,\n    (\n      match: string,\n      mathNumber: string,\n      mathQuote: string,\n      originalString: string,\n    ): any => {\n      result.push(\n        mathQuote\n          ? originalString.replace(/\\\\(\\\\)?/g, '$1')\n          : mathNumber || match,\n      );\n    },\n  );\n\n  return result;\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types/form';\n\nexport default function set(object: FieldValues, path: string, value: any) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue: string | object = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types/form';\n\nexport default (data: FieldValues): any =>\n  Object.entries(data).reduce(\n    (previous: FieldValues, [key, value]): FieldValues => {\n      if (!isKey(key)) {\n        set(previous, key, value);\n        return previous;\n      }\n\n      return { ...previous, [key]: value };\n    },\n    {},\n  );\n","export default (val: unknown): val is undefined => val === undefined;\n","export default (value: any[]) => value.filter(Boolean);\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport unique from './unique';\n\nexport default (obj: any, path: string, defaultValue?: any) => {\n  const result = unique(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types/form';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import isArray from '../utils/isArray';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types/form';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  unmountFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value },\n      ref,\n    } = field;\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  if (unmountFieldsStateRef) {\n    return unmountFieldsStateRef.current[name];\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types/form';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types/utils';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (isArray(objectRef) &&\n            !objectRef.filter((data) => isObject(data) && !isEmptyObject(data))\n              .length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport isArray from '../utils/isArray';\nimport unset from '../utils/unset';\nimport unique from '../utils/unique';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types/form';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n    mutationWatcher,\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n\n    if (!isUndefined(value)) {\n      unmountFieldsStateRef.current[name] = value;\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (isArray(options) && options.length) {\n      unique(options).forEach((option, index): void => {\n        const { ref, mutationWatcher } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n\n          if (mutationWatcher) {\n            mutationWatcher.disconnect();\n          }\n\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !unique(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    if (mutationWatcher) {\n      mutationWatcher.disconnect();\n    }\n\n    delete fieldsRef.current[name];\n  }\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport isArray from '../utils/isArray';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types/form';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  unmountFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n      );\n    }\n  }\n\n  return deepMerge(\n    transformToNestObject((unmountFieldsStateRef || {}).current || {}),\n    transformToNestObject(output),\n  );\n};\n","import isObject from './isObject';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (!isObject(target) || !isObject(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    if (isObject(targetValue) && isObject(sourceValue)) {\n      target[key] = deepMerge(targetValue, sourceValue);\n    } else {\n      target[key] = sourceValue;\n    }\n  }\n\n  return target;\n}\n","import isObject from './isObject';\nimport { FieldError } from '../types/form';\n\nexport default (\n  error: FieldError | undefined,\n  { type, types = {}, message }: FieldError,\n): boolean =>\n  isObject(error) &&\n  error.type === type &&\n  error.message === message &&\n  Object.keys(error.types || {}).length === Object.keys(types).length &&\n  Object.entries(error.types || {}).every(\n    ([key, value]) => types[key] === value,\n  );\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types/form';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types/form';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types/form';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: FlatFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<FlatFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: FlatFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox\n          ? ((fields[name] as Field).options || [])[0].ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, unmountFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types/utils';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldValues, InternalFieldName } from '../types/form';\n\nexport const getPath = <TFieldValues extends FieldValues = FieldValues>(\n  path: InternalFieldName<TFieldValues>,\n  values: TFieldValues | any[],\n): any[] => {\n  const getInnerPath = (\n    value: any,\n    key: number | string,\n    isObject?: boolean,\n  ) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values)\n    .map(([key, value]) => getInnerPath(value, key, isObject(values)))\n    .flat(Infinity);\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\nimport { DeepPartial } from '../types/utils';\nimport {\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types/form';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || isArray(value)) {\n      getPath<TFieldValues>(\n        fieldName,\n        value as TFieldValues,\n      ).forEach((name: string) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import isUndefined from '../utils/isUndefined';\nimport isArray from '../utils/isArray';\n\nexport default function getIsFieldsDifferent(\n  referenceArray: unknown[],\n  differenceArray: unknown[],\n) {\n  if (\n    !isArray<any>(referenceArray) ||\n    !isArray<any>(differenceArray) ||\n    referenceArray.length !== differenceArray.length\n  ) {\n    return true;\n  }\n\n  for (let i = 0; i < referenceArray.length; i++) {\n    const dataA = referenceArray[i];\n    const dataB = differenceArray[i];\n\n    if (\n      isUndefined(dataB) ||\n      Object.keys(dataA).length !== Object.keys(dataB).length\n    ) {\n      return true;\n    }\n\n    for (const key in dataA) {\n      if (dataA[key] !== dataB[key]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n","export const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (names: Set<string>, name: string) =>\n  [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types/form';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types/form';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport shouldRenderBasedOnError from './logic/shouldRenderBasedOnError';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport getIsFieldsDifferent from './logic/getIsFieldsDifferent';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isArray from './utils/isArray';\nimport isString from './utils/isString';\nimport isSameError from './utils/isSameError';\nimport isUndefined from './utils/isUndefined';\nimport onDomRemove from './utils/onDomRemove';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport unique from './utils/unique';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  Touched,\n  FieldError,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  DefaultValuesAtRender,\n  FlatFieldErrors,\n  NestedValue,\n  SetValueConfig,\n  ErrorOption,\n} from './types/form';\nimport { LiteralToPrimitive, DeepPartial, NonUndefined } from './types/utils';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const errorsRef = React.useRef<FieldErrors<TFieldValues>>({});\n  const touchedFieldsRef = React.useRef<Touched<TFieldValues>>({});\n  const fieldArrayDefaultValues = React.useRef<Record<string, unknown[]>>({});\n  const dirtyFieldsRef = React.useRef<Touched<TFieldValues>>({});\n  const watchFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const watchFieldsHookRef = React.useRef<\n    Record<string, Set<InternalFieldName<TFieldValues>>>\n  >({});\n  const watchFieldsHookRenderRef = React.useRef<Record<string, Function>>({});\n  const fieldsWithValidationRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const validFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const isValidRef = React.useRef(true);\n  const defaultValuesRef = React.useRef<\n    | FieldValue<UnpackNestedValue<TFieldValues>>\n    | UnpackNestedValue<DeepPartial<TFieldValues>>\n  >(defaultValues);\n  const defaultValuesAtRenderRef = React.useRef(\n    {} as DefaultValuesAtRender<TFieldValues>,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const isSubmittedRef = React.useRef(false);\n  const isDirtyRef = React.useRef(false);\n  const submitCountRef = React.useRef(0);\n  const isSubmittingRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const unmountFieldsStateRef = React.useRef<Record<string, any>>({});\n  const resetFieldArrayFunctionRef = React.useRef<Record<string, () => void>>(\n    {},\n  );\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<Set<string>>(new Set());\n  const [, render] = React.useState();\n  const modeRef = React.useRef(modeChecker(mode));\n  const {\n    current: { isOnSubmit, isOnAll },\n  } = modeRef;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    isSubmitted: isOnSubmit,\n    submitCount: !isProxyEnabled,\n    touched: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const {\n    current: { isOnBlur: isReValidateOnBlur, isOnChange: isReValidateOnChange },\n  } = React.useRef(modeChecker(reValidateMode));\n  contextRef.current = context;\n  resolverRef.current = resolver;\n\n  const reRender = React.useCallback(\n    () => !isUnMount.current && render({}),\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FlatFieldErrors<TFieldValues>,\n      shouldRender: boolean | null = false,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        shouldRenderBasedOnError<TFieldValues>({\n          errors: errorsRef.current,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(errorsRef.current, name);\n\n      if (isEmptyObject(error)) {\n        if (fieldsWithValidationRef.current.has(name) || resolverRef.current) {\n          validFieldsRef.current.add(name);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        errorsRef.current = unset(errorsRef.current, name);\n      } else {\n        validFieldsRef.current.delete(name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !isSameError(previousError, error[name] as FieldError);\n\n        set(errorsRef.current, name, error[name]);\n      }\n\n      if (shouldReRender && !isNullOrUndefined(shouldRender)) {\n        reRender();\n        return true;\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      { ref, options }: Field,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string).includes(selectRef.value)),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = (value as string).includes(\n                  checkboxRef.value,\n                )),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const setDirty = React.useCallback(\n    (name: InternalFieldName<TFieldValues>): boolean => {\n      const { isDirty, dirtyFields } = readFormStateRef.current;\n\n      if (!fieldsRef.current[name] || (!isDirty && !dirtyFields)) {\n        return false;\n      }\n\n      const isFieldDirty =\n        defaultValuesAtRenderRef.current[name] !==\n        getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n      const isDirtyFieldExist = get(dirtyFieldsRef.current, name);\n      const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n      const previousIsDirty = isDirtyRef.current;\n\n      if (isFieldDirty) {\n        set(dirtyFieldsRef.current, name, true);\n      } else {\n        unset(dirtyFieldsRef.current, name);\n      }\n\n      isDirtyRef.current =\n        (isFieldArray &&\n          getIsFieldsDifferent(\n            get(getValues(), getFieldArrayParentName(name)),\n            get(defaultValuesRef.current, getFieldArrayParentName(name)),\n          )) ||\n        !isEmptyObject(dirtyFieldsRef.current);\n\n      return (\n        (isDirty && previousIsDirty !== isDirtyRef.current) ||\n        (dirtyFields && isDirtyFieldExist !== get(dirtyFieldsRef.current, name))\n      );\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          unmountFieldsStateRef,\n        );\n\n        shouldRenderBaseOnError(name, error, skipReRender ? null : false);\n\n        return isEmptyObject(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      payload:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues() as TFieldValues,\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (isArray(payload)) {\n        const isInputsValid = payload\n          .map((name) => {\n            const error = get(errors, name);\n\n            if (error) {\n              set(errorsRef.current, name, error);\n            } else {\n              unset(errorsRef.current, name);\n            }\n\n            return !error;\n          })\n          .every(Boolean);\n\n        reRender();\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, payload);\n\n        shouldRenderBaseOnError(\n          payload,\n          (error ? { [payload]: error } : {}) as FlatFieldErrors<TFieldValues>,\n          previousFormIsValid !== isValidRef.current,\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (isArray(fields)) {\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, true)),\n        );\n        reRender();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      getPath(name, value).forEach((fieldName) => {\n        const data = {};\n        const field = fieldsRef.current[fieldName];\n\n        if (field) {\n          set(data, name, value);\n          setFieldValue(field, get(data, fieldName));\n\n          if (shouldDirty) {\n            setDirty(fieldName);\n          }\n\n          if (shouldValidate) {\n            trigger(fieldName as FieldName<TFieldValues>);\n          }\n        }\n      });\n    },\n    [trigger, setFieldValue, setDirty],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig,\n    ): boolean | void => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(fieldsRef.current[name] as Field, value);\n        return config.shouldDirty && setDirty(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n      }\n\n      if (!shouldUnregister) {\n        unmountFieldsStateRef.current[name] = value;\n      }\n\n      return true;\n    },\n    [setDirty, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(watchFieldsHookRef.current)) {\n      for (const key in watchFieldsHookRef.current) {\n        if (\n          name === '' ||\n          watchFieldsHookRef.current[key].has(name) ||\n          watchFieldsHookRef.current[key].has(getFieldArrayParentName(name)) ||\n          !watchFieldsHookRef.current[key].size\n        ) {\n          watchFieldsHookRenderRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    value: NonUndefined<TFieldValue> extends NestedValue<infer U>\n      ? U\n      : UnpackNestedValue<DeepPartial<LiteralToPrimitive<TFieldValue>>>,\n    config: SetValueConfig = {},\n  ): void {\n    const shouldRender =\n      setInternalValue(name, value as TFieldValues[string], config) ||\n      isFieldWatched(name);\n\n    renderWatchedInputs(name);\n\n    if (shouldRender) {\n      reRender();\n    }\n\n    if (config.shouldValidate) {\n      trigger(name as any);\n    }\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        const name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error: FlatFieldErrors<TFieldValues>;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation =\n            !isOnAll &&\n            skipValidation({\n              isBlurEvent,\n              isReValidateOnChange,\n              isReValidateOnBlur,\n              isSubmitted: isSubmittedRef.current,\n              ...modeRef.current,\n            });\n          let shouldRender = setDirty(name) || isFieldWatched(name);\n\n          if (\n            isBlurEvent &&\n            !get(touchedFieldsRef.current, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(touchedFieldsRef.current, name, true);\n            shouldRender = true;\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return shouldRender && reRender();\n          }\n\n          if (resolver) {\n            const { errors } = await resolver(\n              getValues() as TFieldValues,\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = isValidRef.current;\n            isValidRef.current = isEmptyObject(errors);\n\n            error = (get(errors, name)\n              ? { [name]: get(errors, name) }\n              : {}) as FlatFieldErrors<TFieldValues>;\n\n            if (previousFormIsValid !== isValidRef.current) {\n              shouldRender = true;\n            }\n          } else {\n            error = await validateField<TFieldValues>(\n              fieldsRef,\n              isValidateAllFieldCriteria,\n              field,\n              unmountFieldsStateRef,\n            );\n          }\n\n          renderWatchedInputs(name);\n\n          if (!shouldRenderBaseOnError(name, error) && shouldRender) {\n            reRender();\n          }\n        }\n      };\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, unmountFieldsStateRef);\n    }\n\n    if (isArray(payload)) {\n      return payload.reduce(\n        (previous, name) => ({\n          ...previous,\n          [name]: getFieldValue(fieldsRef, name, unmountFieldsStateRef),\n        }),\n        {},\n      );\n    }\n\n    return getFieldsValues(fieldsRef, unmountFieldsStateRef);\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...defaultValuesRef.current,\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (previousFormIsValid !== isValidRef.current) {\n        reRender();\n      }\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        unmountFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field: Field | undefined, forceDelete?: boolean) => {\n      if (\n        field &&\n        (!isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) ||\n          forceDelete)\n      ) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister) {\n          [\n            errorsRef,\n            touchedFieldsRef,\n            dirtyFieldsRef,\n            defaultValuesAtRenderRef,\n          ].forEach((data) => unset(data.current, field.ref.name));\n\n          [fieldsWithValidationRef, validFieldsRef].forEach((data) =>\n            data.current.delete(field.ref.name),\n          );\n\n          if (\n            readFormStateRef.current.isValid ||\n            readFormStateRef.current.touched ||\n            readFormStateRef.current.isDirty\n          ) {\n            isDirtyRef.current = !isEmptyObject(dirtyFieldsRef.current);\n            reRender();\n\n            if (resolverRef.current) {\n              validateResolver();\n            }\n          }\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    if (name) {\n      (isArray(name) ? name : [name]).forEach((inputName) =>\n        unset(errorsRef.current, inputName),\n      );\n    } else {\n      errorsRef.current = {};\n    }\n\n    reRender();\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption): void {\n    isValidRef.current = false;\n\n    set(errorsRef.current, name, {\n      ...error,\n      ref: (fieldsRef.current[name] || {})!.ref,\n    });\n\n    reRender();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? watchFieldsHookRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      const fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        unmountFieldsStateRef,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      if (isUndefined(watchId)) {\n        isWatchAllRef.current = true;\n      }\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    (isArray(name) ? name : [name]).forEach((fieldName) =>\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true),\n    );\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn('📋 Field is missing `name` attribute:', ref);\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+]\\.\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\". https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let isFieldArray;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? isArray(field.options) &&\n          unique(field.options).find((option) => {\n            return value === option.ref.value && option.ref === ref;\n          })\n        : ref === field.ref)\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      const mutationWatcher = onDomRemove(ref, () =>\n        removeFieldEventListenerAndRef(field),\n      );\n\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...unique((field && field.options) || []),\n              {\n                ref,\n                mutationWatcher,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n            mutationWatcher,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(unmountFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : unmountFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n      isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(field, defaultValue);\n      }\n    }\n\n    if (resolver && !isFieldArray && readFormStateRef.current.isValid) {\n      validateResolver();\n    } else if (!isEmptyObject(validateOptions)) {\n      fieldsWithValidationRef.current.add(name);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          unmountFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = isValidRef.current;\n\n          isEmptyObject(error)\n            ? validFieldsRef.current.add(name)\n            : (isValidRef.current = false);\n\n          if (previousFormIsValid !== isValidRef.current) {\n            reRender();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n      defaultValuesAtRenderRef.current[name] = isEmptyDefaultValue\n        ? isObject(fieldValue)\n          ? { ...fieldValue }\n          : fieldValue\n        : defaultValue;\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      callback: SubmitHandler<TSubmitFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues: FieldValues = getFieldsValues(\n        fieldsRef,\n        unmountFieldsStateRef,\n      );\n\n      if (readFormStateRef.current.isSubmitting) {\n        isSubmittingRef.current = true;\n        reRender();\n      }\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues as TFieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          errorsRef.current = errors;\n          fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                unmountFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                validFieldsRef.current.delete(name);\n              } else if (fieldsWithValidationRef.current.has(name)) {\n                unset(errorsRef.current, name);\n                validFieldsRef.current.add(name);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(errorsRef.current).every((name) =>\n            Object.keys(fieldsRef.current).includes(name),\n          )\n        ) {\n          errorsRef.current = {};\n          reRender();\n          await callback(\n            fieldValues as UnpackNestedValue<TSubmitFieldValues>,\n            e,\n          );\n        } else {\n          errorsRef.current = {\n            ...errorsRef.current,\n            ...fieldErrors,\n          };\n          if (shouldFocusError) {\n            focusOnErrorField(fieldsRef.current, fieldErrors);\n          }\n        }\n      } finally {\n        isSubmittedRef.current = true;\n        isSubmittingRef.current = false;\n        submitCountRef.current = submitCountRef.current + 1;\n        reRender();\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!errors) {\n      errorsRef.current = {};\n    }\n\n    if (!touched) {\n      touchedFieldsRef.current = {};\n    }\n\n    if (!isValid) {\n      validFieldsRef.current = new Set();\n      fieldsWithValidationRef.current = new Set();\n      isValidRef.current = true;\n    }\n\n    if (!isDirty) {\n      isDirtyRef.current = false;\n    }\n\n    if (!dirtyFields) {\n      dirtyFieldsRef.current = {};\n    }\n\n    if (!isSubmitted) {\n      isSubmittedRef.current = false;\n    }\n\n    if (!submitCount) {\n      submitCountRef.current = 0;\n    }\n\n    defaultValuesAtRenderRef.current = {} as DefaultValuesAtRender<\n      TFieldValues\n    >;\n    fieldArrayDefaultValues.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n\n    defaultValuesRef.current = values || { ...defaultValuesRef.current };\n\n    if (values) {\n      renderWatchedInputs('');\n    }\n\n    unmountFieldsStateRef.current = shouldUnregister ? {} : values || {};\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    resetRefs(omitResetState);\n\n    reRender();\n  };\n\n  React.useEffect(() => {\n    isUnMount.current = false;\n\n    return () => {\n      isUnMount.current = true;\n      fieldsRef.current &&\n        process.env.NODE_ENV === 'production' &&\n        Object.values(fieldsRef.current).forEach((field) =>\n          removeFieldEventListenerAndRef(field, true),\n        );\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver) {\n    isValidRef.current =\n      validFieldsRef.current.size >= fieldsWithValidationRef.current.size &&\n      isEmptyObject(errorsRef.current);\n  }\n\n  const formState = {\n    dirtyFields: dirtyFieldsRef.current,\n    isSubmitted: isSubmittedRef.current,\n    submitCount: submitCountRef.current,\n    touched: touchedFieldsRef.current,\n    isDirty: isDirtyRef.current,\n    isSubmitting: isSubmittingRef.current,\n    isValid: isOnSubmit\n      ? isSubmittedRef.current && isEmptyObject(errorsRef.current)\n      : isValidRef.current,\n  };\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [\n      reRender,\n      setInternalValue,\n      trigger,\n    ]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy<FormStateProxy<TFieldValues>>(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (\n              process.env.NODE_ENV !== 'production' &&\n              prop === 'isValid' &&\n              isOnSubmit\n            ) {\n              console.warn(\n                '📋 `formState.isValid` is applicable with `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n              );\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = {\n    removeFieldEventListener,\n    renderWatchedInputs,\n    watchInternal,\n    reRender,\n    mode: modeRef.current,\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnChange,\n    },\n    errorsRef,\n    touchedFieldsRef,\n    fieldsRef,\n    isWatchAllRef,\n    watchFieldsRef,\n    resetFieldArrayFunctionRef,\n    watchFieldsHookRef,\n    watchFieldsHookRenderRef,\n    fieldArrayDefaultValues,\n    validFieldsRef,\n    dirtyFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    isDirtyRef,\n    isSubmittedRef,\n    readFormStateRef,\n    defaultValuesRef,\n    unmountFieldsStateRef,\n    ...(resolver ? { validateSchemaIsValid: validateResolver } : {}),\n    ...commonProps,\n  };\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: errorsRef.current,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues } from './types/form';\nimport { FormProviderProps } from './types/props';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { UNDEFINED } from '../constants';\n\nexport default () => {\n  const d =\n    typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import isUndefined from './isUndefined';\nimport isArray from './isArray';\nimport unique from './unique';\n\nconst removeAt = <T>(data: T[], index: number): T[] => [\n  ...data.slice(0, index),\n  ...data.slice(index + 1),\n];\n\nfunction removeAtIndexes<T>(data: T[], index: number[]): T[] {\n  let k = -1;\n\n  while (++k < data.length) {\n    if (index.indexOf(k) >= 0) {\n      delete data[k];\n    }\n  }\n\n  return unique(data);\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : isArray(index)\n    ? removeAtIndexes(data, index)\n    : removeAt(data, index);\n","import isUndefined from './isUndefined';\nimport isArray from './isArray';\n\nexport default <T>(data: T[], from: number, to: number): (T | undefined)[] => {\n  if (isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined as any;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  const temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n","import isArray from './isArray';\n\nexport default function prepend<T>(data: T[]): (T | undefined)[];\nexport default function prepend<T>(data: T[], value: T | T[]): T[];\nexport default function prepend<T>(\n  data: T[],\n  value?: T | T[],\n): (T | undefined)[] {\n  return [...(isArray(value) ? value : [value || undefined]), ...data];\n}\n","import isArray from './isArray';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...(isArray(value) ? value : [value || undefined]),\n    ...data.slice(index),\n  ];\n}\n","import isArray from './isArray';\n\nexport default <T>(value: T | T[]): undefined[] | undefined =>\n  isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import isArray from './isArray';\nimport isObject from './isObject';\n\nfunction mapValueToBoolean(value: any) {\n  if (isObject(value)) {\n    const object: any = {};\n\n    for (const key in value) {\n      object[key] = true;\n    }\n\n    return [object];\n  }\n\n  return [true];\n}\n\nexport const filterBooleanArray = <T>(value: T): T[] =>\n  isArray(value)\n    ? value.map(mapValueToBoolean).flat()\n    : mapValueToBoolean(value);\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport { isMatchFieldArrayName } from './logic/isNameInFieldArray';\nimport generateId from './logic/generateId';\nimport isObject from './utils/isObject';\nimport getIsFieldsDifferent from './logic/getIsFieldsDifferent';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport get from './utils/get';\nimport set from './utils/set';\nimport isUndefined from './utils/isUndefined';\nimport removeArrayAt from './utils/remove';\nimport unset from './utils/unset';\nimport moveArrayAt from './utils/move';\nimport swapArrayAt from './utils/swap';\nimport prependAt from './utils/prepend';\nimport isArray from './utils/isArray';\nimport insertAt from './utils/insert';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport { filterBooleanArray } from './utils/filterBooleanArray';\nimport unique from './utils/unique';\nimport {\n  Field,\n  FieldValues,\n  UseFieldArrayOptions,\n  Control,\n  ArrayField,\n} from './types/form';\n\nconst appendId = <TValue extends object, TKeyName extends string>(\n  value: TValue,\n  keyName: TKeyName,\n): Partial<ArrayField<TValue, TKeyName>> => ({\n  [keyName]: generateId(),\n  ...(isObject(value) ? value : { value }),\n});\n\nconst mapIds = <TData extends object, TKeyName extends string>(\n  data: TData | TData[],\n  keyName: TKeyName,\n) => (isArray(data) ? data : []).map((value) => appendId(value, keyName));\n\nexport const useFieldArray = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n  TControl extends Control = Control\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n}: UseFieldArrayOptions<TKeyName, TControl>) => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error('📋 useFieldArray is missing `control` prop.');\n    }\n\n    if (!name) {\n      console.warn('📋 useFieldArray is missing `name` attribute.');\n    }\n  }\n\n  const focusIndexRef = React.useRef(-1);\n  const {\n    isWatchAllRef,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    reRender,\n    fieldsRef,\n    defaultValuesRef,\n    removeFieldEventListener,\n    errorsRef,\n    dirtyFieldsRef,\n    isDirtyRef,\n    touchedFieldsRef,\n    readFormStateRef,\n    watchFieldsRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValues,\n    validateSchemaIsValid,\n    renderWatchedInputs,\n    getValues,\n  } = control || methods.control;\n  let shouldRender;\n\n  const getDefaultValues = () => [\n    ...(get(fieldArrayDefaultValues.current, name) ||\n      get(defaultValuesRef.current, name) ||\n      []),\n  ];\n  const memoizedDefaultValues = React.useRef<Partial<TFieldArrayValues>[]>(\n    getDefaultValues(),\n  );\n  const [fields, setField] = React.useState<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(mapIds(memoizedDefaultValues.current, keyName));\n  const allFields = React.useRef<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(fields);\n  const rootParentName = getFieldArrayParentName(name);\n\n  const getCurrentFieldsValues = () =>\n    get(getValues() || {}, name, allFields.current).map(\n      (item: Partial<TFieldArrayValues>, index: number) => ({\n        ...allFields.current[index],\n        ...item,\n      }),\n    );\n\n  allFields.current = fields;\n  fieldArrayNamesRef.current.add(name);\n\n  if (!get(fieldArrayDefaultValues.current, name) && rootParentName) {\n    set(\n      fieldArrayDefaultValues.current,\n      rootParentName,\n      get(defaultValuesRef.current, rootParentName),\n    );\n  }\n\n  const appendValueWithKey = (values: Partial<TFieldArrayValues>[]) =>\n    values.map((value: Partial<TFieldArrayValues>) => appendId(value, keyName));\n\n  const setFieldAndValidState = (\n    fieldsValues: Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n  ) => {\n    setField(fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateSchemaIsValid) {\n      validateSchemaIsValid({\n        [name]: fieldsValues,\n      });\n    }\n  };\n\n  const shouldRenderFieldArray = (shouldRender?: boolean) => {\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty ||\n      readFormStateRef.current.isValid\n    ) {\n      shouldRender = true;\n    }\n\n    renderWatchedInputs(name);\n\n    shouldRender && !isWatchAllRef.current && reRender();\n  };\n\n  const resetFields = (\n    flagOrFields?: (Partial<TFieldArrayValues> | undefined)[],\n  ) => {\n    if (\n      readFormStateRef.current.isDirty ||\n      readFormStateRef.current.dirtyFields\n    ) {\n      isDirtyRef.current =\n        isUndefined(flagOrFields) ||\n        getIsFieldsDifferent(\n          flagOrFields.map(({ [keyName]: omitted, ...rest } = {}) => rest),\n          get(defaultValuesRef.current, name, []),\n        );\n    }\n\n    for (const key in fieldsRef.current) {\n      if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\n        removeFieldEventListener(fieldsRef.current[key] as Field, true);\n      }\n    }\n  };\n\n  const append = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    shouldRender = false;\n    setFieldAndValidState([\n      ...allFields.current,\n      ...(isArray(value)\n        ? appendValueWithKey(value)\n        : [appendId(value, keyName)]),\n    ]);\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      dirtyFieldsRef.current[name] = [\n        ...(dirtyFieldsRef.current[name] || fillEmptyArray(fields.slice(0, 1))),\n        ...filterBooleanArray(value),\n      ];\n      isDirtyRef.current = true;\n      shouldRender = true;\n    }\n\n    focusIndexRef.current = shouldFocus ? allFields.current.length : -1;\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const prepend = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    shouldRender = false;\n\n    setFieldAndValidState(\n      prependAt(\n        getCurrentFieldsValues(),\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n    resetFields();\n\n    if (isArray(get(errorsRef.current, name))) {\n      errorsRef.current[name] = prependAt(\n        get(errorsRef.current, name),\n        emptyArray,\n      );\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = prependAt(\n        touchedFieldsRef.current[name],\n        emptyArray,\n      );\n      shouldRender = true;\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      dirtyFieldsRef.current[name] = prependAt(\n        dirtyFieldsRef.current[name] || [],\n        filterBooleanArray(value),\n      );\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n    focusIndexRef.current = shouldFocus ? 0 : -1;\n  };\n\n  const remove = (index?: number | number[]) => {\n    shouldRender = false;\n\n    const fieldValues = getCurrentFieldsValues();\n    setFieldAndValidState(removeArrayAt(fieldValues, index));\n    resetFields(removeArrayAt(fieldValues, index));\n\n    if (isArray(get(errorsRef.current, name))) {\n      set(\n        errorsRef.current,\n        name,\n        removeArrayAt(get(errorsRef.current, name), index),\n      );\n\n      if (!unique(get(errorsRef.current, name, [])).length) {\n        unset(errorsRef.current, name);\n      }\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = removeArrayAt(\n        touchedFieldsRef.current[name],\n        index,\n      );\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      dirtyFieldsRef.current[name] = removeArrayAt(\n        dirtyFieldsRef.current[name],\n        index,\n      );\n\n      if (!dirtyFieldsRef.current[name].length) {\n        delete dirtyFieldsRef.current[name];\n      }\n\n      shouldRender = true;\n    }\n\n    if (readFormStateRef.current.isValid && !validateSchemaIsValid) {\n      let fieldIndex = -1;\n      let isFound = false;\n      const isIndexUndefined = isUndefined(index);\n\n      while (fieldIndex++ < fields.length) {\n        const isLast = fieldIndex === fields.length - 1;\n        const isCurrentIndex =\n          (isArray(index) ? index : [index]).indexOf(fieldIndex) >= 0;\n\n        if (isCurrentIndex || isIndexUndefined) {\n          isFound = true;\n        }\n\n        if (!isFound) {\n          continue;\n        }\n\n        for (const key in fields[fieldIndex]) {\n          const currentFieldName = `${name}[${fieldIndex}].${key}`;\n\n          if (isCurrentIndex || isLast || isIndexUndefined) {\n            validFieldsRef.current.delete(currentFieldName);\n            fieldsWithValidationRef.current.delete(currentFieldName);\n          } else {\n            const previousFieldName = `${name}[${fieldIndex - 1}].${key}`;\n\n            if (validFieldsRef.current.has(currentFieldName)) {\n              validFieldsRef.current.add(previousFieldName);\n            }\n            if (fieldsWithValidationRef.current.has(currentFieldName)) {\n              fieldsWithValidationRef.current.add(previousFieldName);\n            }\n          }\n        }\n      }\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const insert = (\n    index: number,\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    shouldRender = false;\n    const emptyArray = fillEmptyArray(value);\n    const fieldValues = getCurrentFieldsValues();\n\n    setFieldAndValidState(\n      insertAt(\n        fieldValues,\n        index,\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n    resetFields(insertAt(fieldValues, index));\n\n    if (isArray(get(errorsRef.current, name))) {\n      errorsRef.current[name] = insertAt(\n        get(errorsRef.current, name),\n        index,\n        emptyArray,\n      );\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = insertAt(\n        touchedFieldsRef.current[name],\n        index,\n        emptyArray,\n      );\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      dirtyFieldsRef.current[name] = insertAt(\n        dirtyFieldsRef.current[name],\n        index,\n        filterBooleanArray(value),\n      );\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n\n    focusIndexRef.current = shouldFocus ? index : -1;\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    shouldRender = false;\n\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields(fieldValues);\n    setFieldAndValidState([...fieldValues]);\n\n    if (isArray(get(errorsRef.current, name))) {\n      swapArrayAt(get(errorsRef.current, name), indexA, indexB);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      swapArrayAt(touchedFieldsRef.current[name], indexA, indexB);\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      swapArrayAt(dirtyFieldsRef.current[name], indexA, indexB);\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const move = (from: number, to: number) => {\n    shouldRender = false;\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    resetFields(fieldValues);\n    setFieldAndValidState([...fieldValues]);\n\n    if (isArray(get(errorsRef.current, name))) {\n      moveArrayAt(get(errorsRef.current, name), from, to);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      moveArrayAt(touchedFieldsRef.current[name], from, to);\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      moveArrayAt(dirtyFieldsRef.current[name], from, to);\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const reset = () => {\n    resetFields();\n    memoizedDefaultValues.current = getDefaultValues();\n    setField(mapIds(memoizedDefaultValues.current, keyName));\n  };\n\n  React.useEffect(() => {\n    const defaultValues = get(fieldArrayDefaultValues.current, name);\n\n    if (defaultValues && fields.length < defaultValues.length) {\n      defaultValues.pop();\n      set(fieldArrayDefaultValues.current, name, defaultValues);\n    }\n\n    if (isWatchAllRef.current) {\n      reRender();\n    } else if (watchFieldsRef) {\n      let shouldRenderUseWatch = true;\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          reRender();\n          shouldRenderUseWatch = false;\n          break;\n        }\n      }\n\n      shouldRenderUseWatch && renderWatchedInputs(name);\n    }\n\n    if (focusIndexRef.current > -1) {\n      for (const key in fieldsRef.current) {\n        const field = fieldsRef.current[key];\n        if (\n          key.startsWith(`${name}[${focusIndexRef.current}]`) &&\n          field!.ref.focus\n        ) {\n          field!.ref.focus();\n          break;\n        }\n      }\n    }\n\n    focusIndexRef.current = -1;\n  }, [\n    fields,\n    name,\n    fieldArrayDefaultValues,\n    reRender,\n    fieldsRef,\n    watchFieldsRef,\n    isWatchAllRef,\n  ]);\n\n  React.useEffect(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    resetFunctions[name] = reset;\n\n    return () => {\n      resetFields();\n      delete resetFunctions[name];\n      fieldArrayNamesRef.current.delete(name);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [fields, name]),\n    insert: React.useCallback(insert, [name]),\n    fields,\n  };\n};\n","import * as React from 'react';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport getInputValue from './logic/getInputValue';\nimport skipValidation from './logic/skipValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport { useFormContext } from './useFormContext';\nimport { VALUE } from './constants';\nimport { Control } from './types/form';\nimport { ControllerProps } from './types/props';\n\nconst Controller = <\n  TAs extends\n    | React.ReactElement\n    | React.ComponentType<any>\n    | 'input'\n    | 'select'\n    | 'textarea',\n  TControl extends Control = Control\n>({\n  name,\n  rules,\n  as,\n  render,\n  defaultValue,\n  control,\n  onFocus,\n  ...rest\n}: ControllerProps<TAs, TControl>) => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production' && !control && !methods) {\n    throw new Error('📋 Controller is missing `control` prop.');\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    isSubmittedRef,\n    touchedFieldsRef,\n    readFormStateRef,\n    reRender,\n    fieldsRef,\n    fieldArrayNamesRef,\n    unmountFieldsStateRef,\n  } = control || methods.control;\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(unmountFieldsStateRef.current, name)) && isNotFieldArray\n      ? unmountFieldsStateRef.current[name]\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const onFocusRef = React.useRef(onFocus);\n  const isSubmitted = isSubmittedRef.current;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (isUndefined(value)) {\n      console.warn(\n        '📋 Controller `defaultValue` or useForm `defaultValues` is missing.',\n      );\n    }\n\n    if (as && render) {\n      console.warn('📋 Should use either `as` or `render` prop.');\n    }\n\n    if (!isNotFieldArray && isUndefined(defaultValue)) {\n      console.warn(\n        '📋 Controller is missing `defaultValue` prop when using `useFieldArray`.',\n      );\n    }\n  }\n\n  const shouldValidate = (isBlurEvent?: boolean) =>\n    !skipValidation({\n      isBlurEvent,\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n      ...mode,\n    });\n\n  const commonTask = ([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  const registerField = React.useCallback(() => {\n    if (process.env.NODE_ENV !== 'production' && !name) {\n      return console.warn('📋 Field is missing `name` prop.');\n    }\n\n    if (fieldsRef.current[name]) {\n      fieldsRef.current[name] = {\n        ref: fieldsRef.current[name]!.ref,\n        ...rules,\n      };\n    } else {\n      register(\n        Object.defineProperty({ name, focus: onFocusRef.current }, VALUE, {\n          set(data) {\n            setInputStateValue(data);\n            valueRef.current = data;\n          },\n          get() {\n            return valueRef.current;\n          },\n        }),\n        rules,\n      );\n      if (isNotFieldArray && !get(defaultValuesRef.current, name)) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  }, [fieldsRef, rules, name, onFocusRef, register]);\n\n  React.useEffect(\n    () => () => {\n      !isNameInFieldArray(fieldArrayNamesRef.current, name) && unregister(name);\n    },\n    [unregister, name, fieldArrayNamesRef],\n  );\n\n  React.useEffect(() => {\n    registerField();\n  }, [registerField]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  React.useEffect(() => {\n    if (!fieldsRef.current[name]) {\n      registerField();\n      if (isNotFieldArray) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  });\n\n  const onBlur = () => {\n    if (\n      readFormStateRef.current.touched &&\n      !get(touchedFieldsRef.current, name)\n    ) {\n      set(touchedFieldsRef.current, name, true);\n      reRender();\n    }\n\n    if (shouldValidate(true)) {\n      trigger(name);\n    }\n  };\n\n  const onChange = (...event: any[]) =>\n    setValue(name, commonTask(event), {\n      shouldValidate: shouldValidate(),\n      shouldDirty: true,\n    });\n\n  const props = {\n    ...rest,\n    onChange,\n    onBlur,\n    name,\n    value,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, props)\n      : React.createElement(as as string, props)\n    : render\n    ? render({\n        onChange,\n        onBlur,\n        value,\n      })\n    : null;\n};\n\nexport { Controller };\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import isEmptyObject from '../utils/isEmptyObject';\nimport isSameError from '../utils/isSameError';\nimport get from '../utils/get';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default function shouldRenderBasedOnError<\n  TFieldValues extends FieldValues\n>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FlatFieldErrors<TFieldValues>;\n  name: InternalFieldName<TFieldValues>;\n  validFields: Set<InternalFieldName<TFieldValues>>;\n  fieldsWithValidation: Set<InternalFieldName<TFieldValues>>;\n}): boolean {\n  const isFieldValid = isEmptyObject(error);\n  const isFormValid = isEmptyObject(errors);\n  const currentFieldError = get(error, name);\n  const existFieldError = get(errors, name);\n\n  if (isFieldValid && validFields.has(name)) {\n    return false;\n  }\n\n  if (\n    isFormValid !== isFieldValid ||\n    (!isFormValid && !existFieldError) ||\n    (isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name))\n  ) {\n    return true;\n  }\n\n  return currentFieldError && !isSameError(existFieldError, currentFieldError);\n}\n","import { Ref } from '../types/form';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove(\n  element: Ref,\n  onDetachCallback: () => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    if (isDetached(element)) {\n      observer.disconnect();\n      onDetachCallback();\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types/form';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types/form';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport isUndefined from './utils/isUndefined';\nimport isString from './utils/isString';\nimport generateId from './logic/generateId';\nimport get from './utils/get';\nimport isArray from './utils/isArray';\nimport {\n  UseWatchOptions,\n  FieldValues,\n  UnpackNestedValue,\n  Control,\n} from './types/form';\nimport { DeepPartial } from './types/utils';\n\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  control?: Control;\n}): undefined | UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  defaultValue: UnpackNestedValue<TWatchFieldValue>;\n  control?: Control;\n}): UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  name: string[];\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValues>({\n  control,\n  name,\n  defaultValue,\n}: UseWatchOptions): TWatchFieldValues {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error('📋 useWatch is missing `control` prop.');\n    }\n\n    if (name === '') {\n      console.warn('📋 useWatch is missing `name` attribute.');\n    }\n  }\n\n  const {\n    watchFieldsHookRef,\n    watchFieldsHookRenderRef,\n    watchInternal,\n    defaultValuesRef,\n  } = control || methods.control;\n  const [value, setValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? isString(name)\n        ? get(defaultValuesRef.current, name)\n        : isArray(name)\n        ? name.reduce(\n            (previous, inputName) => ({\n              ...previous,\n              [inputName]: get(defaultValuesRef.current, inputName),\n            }),\n            {},\n          )\n        : defaultValuesRef.current\n      : defaultValue,\n  );\n  const idRef = React.useRef<string>();\n  const defaultValueRef = React.useRef(defaultValue);\n  const nameRef = React.useRef(name);\n\n  const updateWatchValue = React.useCallback(\n    () =>\n      setValue(\n        watchInternal(nameRef.current, defaultValueRef.current, idRef.current),\n      ),\n    [setValue, watchInternal, defaultValueRef, nameRef, idRef],\n  );\n\n  React.useEffect(() => {\n    const id = (idRef.current = generateId());\n    const watchFieldsHookRender = watchFieldsHookRenderRef.current;\n    const watchFieldsHook = watchFieldsHookRef.current;\n    watchFieldsHook[id] = new Set();\n    watchFieldsHookRender[id] = updateWatchValue;\n    watchInternal(nameRef.current, defaultValueRef.current, id);\n\n    return () => {\n      delete watchFieldsHook[id];\n      delete watchFieldsHookRender[id];\n    };\n  }, [\n    nameRef,\n    updateWatchValue,\n    watchFieldsHookRenderRef,\n    watchFieldsHookRef,\n    watchInternal,\n    defaultValueRef,\n  ]);\n\n  return (isUndefined(value) ? defaultValue : value) as TWatchFieldValues;\n}\n"],"names":["value","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","Array","isObjectType","isNullOrUndefined","isArray","test","input","result","replace","match","mathNumber","mathQuote","originalString","push","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","key","newValue","objValue","isObject","isNaN","data","Object","previous","_a","_c","__read","val","undefined","Boolean","obj","defaultValue","unique","split","isUndefined","ref","validateWithStateUpdate","isHTMLElement","removeEventListener","defaultReturn","isValid","options","option","checked","element","type","SELECT","defaultResult","validResult","values","attributes","getFieldValue","fieldsRef","name","unmountFieldsStateRef","field","current","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","__spread","isCheckBox","getCheckboxValue","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","unset","updatePath","childObject","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isSameRef","fieldValue","search","output","name_1","isString","deepMerge","target","source","targetValue","sourceValue","transformToNestObject","error","_b","types","message","RegExp","validationData","isRegex","isValidElement","getValidateError","isMessage","isBoolean","validateAllFieldCriteria","errors","required","maxLength","minLength","min","max","pattern","validate","fields","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","requiredValue","requiredMessage","exceedMin","_d","maxValue","maxMessage","_e","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","valueDate","valueAsDate","Date","_f","maxLengthValue","_g","minLengthValue","inputLength","toString","_h","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","_o","validateError","validationResult","_j","__values","_l","validateFunction","validateResult","getPath","pathWithIndex","isPrimitive","getInnerPath","Infinity","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","get","isOnBlur","isOnChange","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","substring","getIsFieldsDifferent","referenceArray","differenceArray","i","dataA","dataB","isMatchFieldArrayName","searchName","names","mode","isOnSubmit","isOnAll","isWindowUndefined","window","isWeb","document","isProxyEnabled","Proxy","FormContext","React.createContext","displayName","useFormContext","React.useContext","d","performance","now","c","r","Math","random","removeAtIndexes","removeAt","from","to","indexA","indexB","temp","prepend","insert","mapValueToBoolean","filterBooleanArray","appendId","keyName","generateId","mapIds","rules","as","render","control","onFocus","rest","methods","defaultValuesRef","setValue","register","unregister","trigger","isSubmittedRef","touchedFieldsRef","readFormStateRef","reRender","fieldArrayNamesRef","isNotFieldArray","isNameInFieldArray","getInitialValue","React.useState","setInputStateValue","valueRef","React.useRef","onFocusRef","shouldValidate","skipValidation","commonTask","event","getInputValue","registerField","React.useCallback","focus","React.useEffect","onBlur","touched","onChange","_i","shouldDirty","props","React.isValidElement","React.cloneElement","React.createElement","children","Provider","__assign","shouldRender","focusIndexRef","isWatchAllRef","resetFieldArrayFunctionRef","removeFieldEventListener","errorsRef","dirtyFieldsRef","isDirtyRef","watchFieldsRef","validFieldsRef","fieldsWithValidationRef","fieldArrayDefaultValues","validateSchemaIsValid","renderWatchedInputs","getValues","getDefaultValues","memoizedDefaultValues","setField","allFields","rootParentName","getFieldArrayParentName","getCurrentFieldsValues","appendValueWithKey","setFieldAndValidState","fieldsValues","shouldRenderFieldArray","dirtyFields","isDirty","resetFields","flagOrFields","reset","defaultValues","pop","shouldRenderUseWatch","resetFunctions","delete","swap","swapArrayAt","move","moveArrayAt","shouldFocus","emptyArray","fillEmptyArray","prependAt","append","remove","removeArrayAt","fieldIndex","isFound","isIndexUndefined","isLast","isCurrentIndex","currentFieldName","previousFieldName","has","insertAt","reValidateMode","resolver","context","shouldFocusError","shouldUnregister","criteriaMode","watchFieldsHookRef","watchFieldsHookRenderRef","isValidRef","defaultValuesAtRenderRef","isUnMount","submitCountRef","isSubmittingRef","handleChangeRef","contextRef","resolverRef","modeRef","modeChecker","isValidateAllFieldCriteria","submitCount","isSubmitting","_k","shouldRenderBaseOnError","shouldReRender","validFields","fieldsWithValidation","isFieldValid","isFormValid","currentFieldError","existFieldError","isSameError","shouldRenderBasedOnError","previousError","setFieldValue","rawValue","radioRef","selectRef","selected","checkboxRef","setDirty","isFieldDirty","isDirtyFieldExist","isFieldArray","previousIsDirty","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","payload","previousFormIsValid","isInputsValid","Promise","all","setInternalValues","setInternalValue","config","isFieldWatched","found","size","getFieldsValues","shouldSkipValidation","validateResolver","forceDelete","handleChange","mutationWatcher","fieldRef","options_1","removeAllEventListeners","disconnect","findRemovedFieldAndRemoveListener","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","combinedDefaultValues","assignWatchFields","registerFieldRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isEmptyDefaultValue","onDetachCallback","observer","MutationObserver","observe","childList","subtree","isEmptyUnmountFields","then","shouldAttachChangeEvent","addEventListener","attachEventListeners","isSelectInput","handleSubmit","callback","e","preventDefault","persist","fieldErrors","fieldError","focusOnErrorField","formState","commonProps","refOrValidationOptions","prop","watch","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearErrors","inputName","setError","idRef","defaultValueRef","nameRef","updateWatchValue","id","watchFieldsHookRender","watchFieldsHook"],"mappings":"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"}